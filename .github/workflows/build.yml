name: build

on:
  workflow_call:
    inputs:
      artifact-name:
        required: true
        type: string

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: load/save cache
        uses: actions/cache@v3
        with:
          path: |
              vendor
              node_modules
              /tmp/composer-cache
          key: ${{ runner.os }}-ztl-validate-cached-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/composer.lock') }}-v1
          restore-keys: |
            ${{ runner.os }}-ztl-validate-cached-
      - name: Setup composer and install packages
        uses: php-actions/composer@v6
        with:
          php_version: "8.1"
          php_extensions: gd zip

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18.2.0

      - name: update node packages
        run: npm ci
    
      - name: check formatting
        run: npm run format-check; composer format-check

  build:
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: checkout code
        uses: actions/checkout@v3

      - name: load/save cache
        uses: actions/cache@v3
        with:
          path: |
              vendor
              node_modules
              /tmp/composer-cache
          key: ${{ runner.os }}-ztl-build-cached-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/composer.lock') }}-v1
          restore-keys: |
            ${{ runner.os }}-ztl-build-cached-

      - name: Setup composer and install packages
        uses: php-actions/composer@v6
        with:
          php_version: "8.1"
          php_extensions: gd zip
          dev: no

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18.2.0

      - name: update node packages
        run: npm ci

      - name: build assets
        run: npm run prod

      - name: uninstall node dev dependencies
        run: npm prune --omit=dev

      - name: remove scripts
        run: rm -r scripts

      - name: archive for artifact
        run: |
          touch ${{ inputs.artifact-name }}.tar.gz
          tar --exclude=${{ inputs.artifact-name }}.tar.gz -zcvf ${{ inputs.artifact-name }}.tar.gz .

      - name: create artifact for deploy
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifact-name }}
          path: ./${{ inputs.artifact-name }}.tar.gz
